{	
"drone 01 imports": {
	"scope": "python",
	"prefix": "drone01imports",
	"body": [
		"# -----------------------------------------------\r",
		"# 1 IMPORTS\r",
		"# -----------------------------------------------\r",
		"import socket\nimport time\nimport threading"
	],
	"description": "drone 01 imports"		
	},
"drone02receiveFunctions": {
	"scope": "python",
	"prefix": "drone02receiveFunctions",
	"body": [
		"# -----------------------------------------------\r",
		"# 2 RECEIVE DATA FUNCTIONS\r",
		"# -----------------------------------------------\r",
		"def receiveData():\r",
		"    global response\r",
		"    while True:\r",
		"        try:\r",
		"            response, _ = clientSocket.recvfrom(1024)\r",
		"        except:\r",
		"            break\r",
		"\r",
		"def readStates():\r",
		"    global battery\r",
		"    while True:\r",
		"        try:\r",
		"            response_state, _ = stateSocket.recvfrom(256)\r",
		"            if response_state != 'ok':\r",
		"                response_state = response_state.decode('ASCII')\r",
		"                list = response_state.replace(';', ':').split(':')\r",
		"                battery = int(list[21])                \r",
		"        except:\r",
		"            break"
	],
	"description": ""
	},
"drone 03 send commands": {
	"prefix": "drone03SendCommands",
	"body": [
		"# -----------------------------------------------\r",
		"# 3 SEND COMMAND  FUNCTIONS\r",
		"# -----------------------------------------------\r",
		"def sendCommand(command):\r",
		"    global response\r",
		"    timestamp = int(time.time() * 1000)\r",
		"\r",
		"    clientSocket.sendto(command.encode('utf-8'), address)\r",
		"\r",
		"    while response is None:\r",
		"        if (time.time() * 1000) - timestamp > 5 * 1000:\r",
		"            return False\r",
		"\r",
		"    return response\r",
		"\r",
		"\r",
		"def sendReadCommand(command):\r",
		"    response = sendCommand(command)\r",
		"    try:\r",
		"        response = str(response)\r",
		"    except:\r",
		"        pass\r",
		"    return response\r",
		"\r",
		"def sendControlCommand(command):\r",
		"    response = None\r",
		"    for i in range(0, 5):\r",
		"        response = sendCommand(command)\r",
		"        if response == 'OK' or response == 'ok':\r",
		"            return True\r",
		"\r",
		"    return False"
	],
	"description": ""
	},
"drone 04 connection to the drone": {
        "prefix": "drone04ConnectionToDrone",
        "body": [
			"# -----------------------------------------------\r",
			"# 4 CONNECTION TO THE DRONE\r",
			"# -----------------------------------------------\r",			
            "# connection info\r",
            "UDP_IP = '192.168.10.1'\r",
            "UDP_PORT = 8889\r",
            "last_received_command = time.time()\r",
            "STATE_UDP_PORT = 8890\r",
            "\r",
            "address = (UDP_IP, UDP_PORT)\r",
            "response = None\r",
            "response_state = None\r",
            "\r",
            "clientSocket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\r",
            "clientSocket.bind(('', UDP_PORT))\r",
            "stateSocket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\r",
            "stateSocket.bind(('', STATE_UDP_PORT))"
        ],
        "description": ""
	},
"drone 05 listener threads": {
        "prefix": "drone05ListenerThreads",
        "body": [
			"# -----------------------------------------------\r",
			"# 5 LISTENER THREADS\r",
			"# -----------------------------------------------\r",			
            "# start threads\r",
            "recThread = threading.Thread(target=receiveData)\r",
            "recThread.daemon = True\r",
            "recThread.start()\r",
            "\r",
            "stateThread = threading.Thread(target=readStates)\r",
            "stateThread.daemon = True\r",
            "stateThread.start()"
        ],
        "description": ""
	},
"drone 06 app get battery": {
        "prefix": "drone06AppGetBattery",
        "body": [
			"# -----------------------------------------------\r",
			"# 6 APP LOGIC, GET BATTERY\r",
			"# -----------------------------------------------\r",			
            "# drone information\r",
            "battery = 0\r",
            "\r",
            "# connect to drone\r",
            "sendControlCommand(\"command\")\r",
            "\r",
            "# get and display battery\r",
            "sendReadCommand('battery?')\r",
            "\r",
            "time.sleep(5)\r",
            "print(f'Battery: {battery} %')"
        ],
        "description": ""
	},
"drone 30 general drone code": {
        "prefix": "drone30camerageneralcode",
        "body": [
			"# -----------------------------------------------\r",
            "# 30 CAMERA GENERAL CODE\r",			
            "# IMPORTS\r",
            "# -----------------------------------------------\r",
            "\r",
            "import socket\r",
            "import time\r",
            "import threading\r",
            "import cv2\r",
            "\r",
            "# -----------------------------------------------\r",
            "# RECEIVE DATA FUNCTIONS\r",
            "# -----------------------------------------------\r",
            "\r",
            "def receiveData():\r",
            "    global response\r",
            "    while True:\r",
            "        try:\r",
            "            response, _ = clientSocket.recvfrom(1024)\r",
            "        except:\r",
            "            break\r",
            "\r",
            "def readStates():\r",
            "    global battery\r",
            "    while True:\r",
            "        try:\r",
            "            response_state, _ = stateSocket.recvfrom(256)\r",
            "            if response_state != 'ok':\r",
            "                response_state = response_state.decode('ASCII')\r",
            "                list = response_state.replace(';', ':').split(':')\r",
            "                battery = int(list[21])                \r",
            "        except:\r",
            "            break\r",
            "\r",
            "# -----------------------------------------------\r",
            "# SEND COMMAND  FUNCTIONS\r",
            "# -----------------------------------------------\r",
            "\r",
            "def sendCommand(command):\r",
            "    global response\r",
            "    timestamp = int(time.time() * 1000)\r",
            "\r",
            "    clientSocket.sendto(command.encode('utf-8'), address)\r",
            "\r",
            "    while response is None:\r",
            "        if (time.time() * 1000) - timestamp > 5 * 1000:\r",
            "            return False\r",
            "\r",
            "    return response\r",
            "\r",
            "\r",
            "def sendReadCommand(command):\r",
            "    response = sendCommand(command)\r",
            "    try:\r",
            "        response = str(response)\r",
            "    except:\r",
            "        pass\r",
            "    return response\r",
            "\r",
            "def sendControlCommand(command):\r",
            "    response = None\r",
            "    for i in range(0, 5):\r",
            "        response = sendCommand(command)\r",
            "        if response == 'OK' or response == 'ok':\r",
            "            return True\r",
            "    return False\r",
            "\r",
            "# -----------------------------------------------\r",
            "# CONNECTION TO THE DRONE\r",
            "# -----------------------------------------------\r",
            "\r",
            "# connection info\r",
            "UDP_IP = '192.168.10.1'\r",
            "UDP_PORT = 8889\r",
            "last_received_command = time.time()\r",
            "STATE_UDP_PORT = 8890\r",
            "\r",
            "address = (UDP_IP, UDP_PORT)\r",
            "response = None\r",
            "response_state = None\r",
            "\r",
            "clientSocket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\r",
            "clientSocket.bind(('', UDP_PORT))\r",
            "stateSocket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\r",
            "stateSocket.bind(('', STATE_UDP_PORT))\r",
            "\r",
            "# -----------------------------------------------\r",
            "# LISTENER THREADS\r",
            "# -----------------------------------------------\r",
            "\r",
            "# start threads\r",
            "recThread = threading.Thread(target=receiveData)\r",
            "recThread.daemon = True\r",
            "recThread.start()\r",
            "\r",
            "stateThread = threading.Thread(target=readStates)\r",
            "stateThread.daemon = True\r",
            "stateThread.start()"
        ],
        "description": ""
	},
"drone 31 camera start drone connection": {
        "prefix": "drone31StartDroneConnection",
        "body": [
			"# -----------------------------------------------\r",
            "# 31 CAMERA\r",						
            "# START DRONE CONNECTION\r",
            "# -----------------------------------------------\r",
            "\r",
            "# connect to drone\r",
            "response = sendControlCommand(\"command\")\r",
            "print(f'command response: {response}')\r",
            "response = sendControlCommand(\"streamon\")\r",
            "print(f'streamon response: {response}')"
        ],
        "description": ""
	},
"drone 32 start drone camera": {
        "prefix": "drone32startdronecamera",
        "body": [
			"# -----------------------------------------------\r",
            "# 32 CAMERA \r",						
            "# START DRONE CAMERA\r",
            "# -----------------------------------------------\r",
            "\r",
            "# open UDP\r",
            "print(f'opening UDP video feed, wait 2 seconds ')\r",
            "videoUDP = 'udp://192.168.10.1:11111'\r",
            "cap = cv2.VideoCapture(videoUDP)\r",
            "time.sleep(2)"
        ],
        "description": ""
	},
"drone 33 Display Drone Camera With OpenCV": {
        "prefix": "drone33displayDroneCameraWithOpenCV",
        "body": [
			"# -----------------------------------------------\r",
            "# 33 CAMERA\r",						
            "# APP DISPLAY CAMERA WITH OPENCV\r",
            "# -----------------------------------------------\r",
            "\r",
            "# drone information\r",
            "battery = 0\r",
            "\r",
            "# open\r",
            "i = 0\r",
            "while True:\r",
            "    i = i + 1\r",
            "    sendReadCommand('battery?')\r",
            "    print(f'battery: {battery} % - i: {i}')\r",
            "\r",
            "    try:\r",
            "        ret, frame = cap.read()\r",
            "        img = cv2.resize(frame, (640, 480))\r",
            "        cv2.imshow('@elbruno - DJI Tello Camera', img)\r",
            "    except Exception as e:\r",
            "        print(f'exc: {e}')\r",
            "        pass\r",
            "\r",
            "    if cv2.waitKey(1) & 0xFF == ord('q'):\r",
            "        break\r",
            "    "
        ],
        "description": ""
	},
"drone 34 end drone camera stream": {
        "prefix": "drone34EndDroneCameraStream",
        "body": [
			"# -----------------------------------------------\r",
            "# 34 CAMERA\r",						
            "# END STREAM AND CLOSE\r",
            "# -----------------------------------------------\r",
            "\r",
            "response = sendControlCommand(\"streamoff\")\r",
            "print(f'streamon response: {response}')"
        ],
        "description": ""
    }	
}

