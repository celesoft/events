[ MLNet01 Pipeline usings ]

using System;
using System.IO;
using Microsoft.ML;
using Microsoft.ML.Data;
using Microsoft.ML.Runtime.Data;

[MLNet02 Age Classes ]

public class AgeRange
{
    [Column(ordinal: "0")]
    public string Name;

    [Column(ordinal: "1")]
    public float Age;

    [Column(ordinal: "2")]
    public string Gender;

    [Column(ordinal: "3")]
    public string Label;
}
public class AgeRangePrediction
{
    [ColumnName("Label")]
    public string PredictedLabel;
}

[MLNet03 Loader ]

// Data
var mlContext = new MLContext(seed: 0);
_textLoader = mlContext.Data.TextReader(new TextLoader.Arguments()
{
    Separator = ",",
    HasHeader = true,
    Column = new[]
        {
            new TextLoader.Column("Name", DataKind.Text, 0),
            new TextLoader.Column("Age", DataKind.Num, 1),
            new TextLoader.Column("Gender", DataKind.Text, 2),
            new TextLoader.Column("Label", DataKind.Text, 3),
        }
});

[ MLNet 04 static vars ]

static readonly string TrainDataPath = Path.Combine(Environment.CurrentDirectory, "Data", "AgeRangeData01.csv");
static TextLoader _textLoader;


[ MLNet 05 Train ]

// Train
var pipeline = mlContext.Transforms.Concatenate("Features", "Age")
        .Append(mlContext.Transforms.Conversion.MapValueToKey("Label"), TransformerScope.TrainTest)
        .Append(mlContext.MulticlassClassification.Trainers.StochasticDualCoordinateAscent())
        .Append(mlContext.Transforms.Conversion.MapKeyToValue(("PredictedLabel", "Label")));
var model = pipeline.Fit(dvTrain);
Console.WriteLine("Model trained");

[ MLNet 06 Predict ]

// Predict
var predictionFunction = model.MakePredictionFunction<AgeRange, AgeRangePrediction>(mlContext);
PredictSimple("Jeff", 2, "M", predictionFunction);
PredictSimple("Shelley", 9, "F", predictionFunction);
PredictSimple("Jackie", 3, "F", predictionFunction);
PredictSimple("Jim", 5, "M", predictionFunction);

[ MLNet 07 Predict Function ]

private static void PredictSimple(string name, float age, string gender, PredictionFunction<AgeRange, AgeRangePrediction> predictionFunction)
{
    var example = new AgeRange()
    {
        Age = age,
        Name = name,
        Gender = gender
    };
    var prediction = predictionFunction.Predict(example);
    Console.WriteLine($"Name: {example.Name}\t Age: {example.Age:00}\t Gender: {example.Gender}\t >> Predicted Label: {prediction.PredictedLabel}");
}

[ MLNet 08 Train AGE GENDER ]

// Train
var pipeline = mlContext.Transforms.Text.FeaturizeText("Gender", "GenderFeat")
        .Append(mlContext.Transforms.Concatenate("Features", "Age", "GenderFeat"))
        .Append(mlContext.Transforms.Conversion.MapValueToKey("Label"), TransformerScope.TrainTest)
        .Append(mlContext.MulticlassClassification.Trainers.StochasticDualCoordinateAscent())
        .Append(mlContext.Transforms.Conversion.MapKeyToValue(("PredictedLabel", "Label")));
var model = pipeline.Fit(dvTrain);
Console.WriteLine("Model trained");